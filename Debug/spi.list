
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002188  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022e8  080022e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002304  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002304  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d65  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad6  00000000  00000000  00027d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00029870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164e2  00000000  00000000  0002a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7ef  00000000  00000000  00040d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086049  00000000  00000000  0004b589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d15d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000210c  00000000  00000000  000d1624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080022ac 	.word	0x080022ac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080022ac 	.word	0x080022ac

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MFRC522_Write_Register>:

	return recive_buffor[1];
}


void MFRC522_Write_Register(uint8_t adress, uint8_t value){
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	460a      	mov	r2, r1
 800048e:	71fb      	strb	r3, [r7, #7]
 8000490:	4613      	mov	r3, r2
 8000492:	71bb      	strb	r3, [r7, #6]

	//starting comunication
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049a:	4810      	ldr	r0, [pc, #64]	; (80004dc <MFRC522_Write_Register+0x58>)
 800049c:	f000 fd4c 	bl	8000f38 <HAL_GPIO_WritePin>

	uint8_t size = 2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	73fb      	strb	r3, [r7, #15]
	uint8_t Data[2];

	//data format specified by rc522 datasheet
	Data[0] = ( 0x7E & (adress << 1) );
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	733b      	strb	r3, [r7, #12]
	Data[1] = value;
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit ( &hspi1 , Data,  size, HAL_MAX_DELAY);
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	f107 010c 	add.w	r1, r7, #12
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <MFRC522_Write_Register+0x5c>)
 80004c4:	f001 fb8d 	bl	8001be2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <MFRC522_Write_Register+0x58>)
 80004d0:	f000 fd32 	bl	8000f38 <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40020000 	.word	0x40020000
 80004e0:	20000028 	.word	0x20000028

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_GPIO_Init+0xa0>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a21      	ldr	r2, [pc, #132]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a1b      	ldr	r2, [pc, #108]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RESET_GPIO_Port, SPI1_RESET_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	4816      	ldr	r0, [pc, #88]	; (8000588 <MX_GPIO_Init+0xa4>)
 8000530:	f000 fd02 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053a:	4814      	ldr	r0, [pc, #80]	; (800058c <MX_GPIO_Init+0xa8>)
 800053c:	f000 fcfc 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin;
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	2302      	movs	r3, #2
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RESET_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <MX_GPIO_Init+0xa4>)
 8000558:	f000 fb5e 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800055c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_GPIO_Init+0xa8>)
 8000576:	f000 fb4f 	bl	8000c18 <HAL_GPIO_Init>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	40020800 	.word	0x40020800
 800058c:	40020000 	.word	0x40020000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 f9cb 	bl	800092e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f80a 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f7ff ffa2 	bl	80004e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a0:	f000 f852 	bl	8000648 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f930 	bl	8000808 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Stable_communication_write();
 80005a8:	f000 f923 	bl	80007f2 <Stable_communication_write>
 80005ac:	e7fc      	b.n	80005a8 <main+0x18>
	...

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b092      	sub	sp, #72	; 0x48
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe6c 	bl	800229c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <SystemClock_Config+0x88>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <SystemClock_Config+0x88>)
 80005dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2310      	movs	r3, #16
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fcb6 	bl	8000f68 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000602:	f000 f81b 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060a:	2301      	movs	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 ffd2 	bl	80015c8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800062a:	f000 f807 	bl	800063c <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3748      	adds	r7, #72	; 0x48
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40007000 	.word	0x40007000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_SPI1_Init+0x64>)
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_SPI1_Init+0x64>)
 8000654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_SPI1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_SPI1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_SPI1_Init+0x64>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_SPI1_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_SPI1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_SPI1_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_SPI1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_SPI1_Init+0x64>)
 8000694:	220a      	movs	r2, #10
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_SPI1_Init+0x64>)
 800069a:	f001 fa19 	bl	8001ad0 <HAL_SPI_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006a4:	f7ff ffca 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40013000 	.word	0x40013000

080006b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <HAL_SPI_MspInit+0x7c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d127      	bne.n	8000726 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006d8:	6a1b      	ldr	r3, [r3, #32]
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e0:	6213      	str	r3, [r2, #32]
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000706:	23e0      	movs	r3, #224	; 0xe0
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000716:	2305      	movs	r3, #5
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_SPI_MspInit+0x84>)
 8000722:	f000 fa79 	bl	8000c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013000 	.word	0x40013000
 8000734:	40023800 	.word	0x40023800
 8000738:	40020000 	.word	0x40020000

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_MspInit+0x58>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <HAL_MspInit+0x58>)
 8000748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_MspInit+0x58>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_MspInit+0x58>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <HAL_MspInit+0x58>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6213      	str	r3, [r2, #32]
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_MspInit+0x58>)
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x58>)
 8000774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_MspInit+0x58>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6253      	str	r3, [r2, #36]	; 0x24
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_MspInit+0x58>)
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40023800 	.word	0x40023800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f8f9 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <Stable_communication_write>:
	HAL_Delay(100);


}

void Stable_communication_write(){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0

	MFRC522_Write_Register(PCD_REG_COMMAND, 3);
 80007f6:	2103      	movs	r1, #3
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff fe43 	bl	8000484 <MFRC522_Write_Register>
	HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f000 f904 	bl	8000a0c <HAL_Delay>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f001 fbd6 	bl	8001ff0 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f7ff fef7 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000080 	.word	0x20000080
 8000858:	40004400 	.word	0x40004400

0800085c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x7c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d127      	bne.n	80008ce <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6253      	str	r3, [r2, #36]	; 0x24
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_UART_MspInit+0x80>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_UART_MspInit+0x80>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_UART_MspInit+0x80>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ae:	230c      	movs	r3, #12
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008be:	2307      	movs	r3, #7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_UART_MspInit+0x84>)
 80008ca:	f000 f9a5 	bl	8000c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ff6c 	bl	80007e6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f001 fca1 	bl	8002254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fe3d 	bl	8000590 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	200000c8 	.word	0x200000c8

0800092c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_IRQHandler>

0800092e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f939 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	200f      	movs	r0, #15
 8000940:	f000 f80e 	bl	8000960 <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000950:	f7ff fef4 	bl	800073c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	79fb      	ldrb	r3, [r7, #7]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_InitTick+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d022      	beq.n	80009ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_InitTick+0x6c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_InitTick+0x68>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000980:	fbb1 f3f3 	udiv	r3, r1, r3
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f938 	bl	8000bfe <HAL_SYSTICK_Config>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10f      	bne.n	80009b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d809      	bhi.n	80009ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099a:	2200      	movs	r2, #0
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	f04f 30ff 	mov.w	r0, #4294967295
 80009a2:	f000 f910 	bl	8000bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_InitTick+0x70>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e007      	b.n	80009be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e004      	b.n	80009be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e001      	b.n	80009be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_IncTick+0x1c>)
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200000c4 	.word	0x200000c4
 80009f4:	20000008 	.word	0x20000008

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200000c4 	.word	0x200000c4

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d004      	beq.n	8000a30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_Delay+0x40>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a30:	bf00      	nop
 8000a32:	f7ff ffe1 	bl	80009f8 <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d8f7      	bhi.n	8000a32 <HAL_Delay+0x26>
  {
  }
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000008 	.word	0x20000008

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff90 	bl	8000ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff49 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff5e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff90 	bl	8000b08 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5f 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffb0 	bl	8000b6c <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c2e:	e160      	b.n	8000ef2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 8152 	beq.w	8000eec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d005      	beq.n	8000c60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d130      	bne.n	8000cc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c96:	2201      	movs	r2, #1
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	f003 0201 	and.w	r2, r3, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d017      	beq.n	8000cfe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d123      	bne.n	8000d52 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	6939      	ldr	r1, [r7, #16]
 8000d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0203 	and.w	r2, r3, #3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 80ac 	beq.w	8000eec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <HAL_GPIO_Init+0x2f8>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4a5d      	ldr	r2, [pc, #372]	; (8000f10 <HAL_GPIO_Init+0x2f8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6213      	str	r3, [r2, #32]
 8000da0:	4b5b      	ldr	r3, [pc, #364]	; (8000f10 <HAL_GPIO_Init+0x2f8>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dac:	4a59      	ldr	r2, [pc, #356]	; (8000f14 <HAL_GPIO_Init+0x2fc>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a51      	ldr	r2, [pc, #324]	; (8000f18 <HAL_GPIO_Init+0x300>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d025      	beq.n	8000e24 <HAL_GPIO_Init+0x20c>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d01f      	beq.n	8000e20 <HAL_GPIO_Init+0x208>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <HAL_GPIO_Init+0x308>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x204>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a4e      	ldr	r2, [pc, #312]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x200>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a4d      	ldr	r2, [pc, #308]	; (8000f28 <HAL_GPIO_Init+0x310>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1fc>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <HAL_GPIO_Init+0x314>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1f8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a4b      	ldr	r2, [pc, #300]	; (8000f30 <HAL_GPIO_Init+0x318>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1f4>
 8000e08:	2306      	movs	r3, #6
 8000e0a:	e00c      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	e00a      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e10:	2305      	movs	r3, #5
 8000e12:	e008      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e14:	2304      	movs	r3, #4
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e004      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e24:	2300      	movs	r3, #0
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e36:	4937      	ldr	r1, [pc, #220]	; (8000f14 <HAL_GPIO_Init+0x2fc>)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e44:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e68:	4a32      	ldr	r2, [pc, #200]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e92:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f47f ae97 	bne.w	8000c30 <HAL_GPIO_Init+0x18>
  }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e31d      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f7a:	4b94      	ldr	r3, [pc, #592]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f84:	4b91      	ldr	r3, [pc, #580]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d07b      	beq.n	8001092 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d006      	beq.n	8000fae <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2b0c      	cmp	r3, #12
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x5e>
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fac:	d10b      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fae:	4b87      	ldr	r3, [pc, #540]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d06a      	beq.n	8001090 <HAL_RCC_OscConfig+0x128>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d166      	bne.n	8001090 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e2f7      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d106      	bne.n	8000fdc <HAL_RCC_OscConfig+0x74>
 8000fce:	4b7f      	ldr	r3, [pc, #508]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a7e      	ldr	r2, [pc, #504]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e02d      	b.n	8001038 <HAL_RCC_OscConfig+0xd0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x96>
 8000fe4:	4b79      	ldr	r3, [pc, #484]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a78      	ldr	r2, [pc, #480]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b76      	ldr	r3, [pc, #472]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a75      	ldr	r2, [pc, #468]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e01c      	b.n	8001038 <HAL_RCC_OscConfig+0xd0>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b05      	cmp	r3, #5
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0xb8>
 8001006:	4b71      	ldr	r3, [pc, #452]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a70      	ldr	r2, [pc, #448]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6e      	ldr	r3, [pc, #440]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6d      	ldr	r2, [pc, #436]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xd0>
 8001020:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a69      	ldr	r2, [pc, #420]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b67      	ldr	r3, [pc, #412]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a66      	ldr	r2, [pc, #408]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fcda 	bl	80009f8 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fcd6 	bl	80009f8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e2ad      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800105a:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe0>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fcc6 	bl	80009f8 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fcc2 	bl	80009f8 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e299      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001082:	4b52      	ldr	r3, [pc, #328]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x108>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d05a      	beq.n	8001154 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	d119      	bne.n	80010de <HAL_RCC_OscConfig+0x176>
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d116      	bne.n	80010de <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b0:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_OscConfig+0x160>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e276      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	493d      	ldr	r1, [pc, #244]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010dc:	e03a      	b.n	8001154 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d020      	beq.n	8001128 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_RCC_OscConfig+0x268>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc84 	bl	80009f8 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fc80 	bl	80009f8 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e257      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	492a      	ldr	r1, [pc, #168]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
 8001126:	e015      	b.n	8001154 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <HAL_RCC_OscConfig+0x268>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fc63 	bl	80009f8 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fc5f 	bl	80009f8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e236      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80b8 	beq.w	80012d2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d170      	bne.n	800124a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x218>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e21a      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800118c:	429a      	cmp	r2, r3
 800118e:	d921      	bls.n	80011d4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fc3b 	bl	8001a10 <RCC_SetFlashLatencyFromMSIRange>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e208      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4906      	ldr	r1, [pc, #24]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	061b      	lsls	r3, r3, #24
 80011c4:	4901      	ldr	r1, [pc, #4]	; (80011cc <HAL_RCC_OscConfig+0x264>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
 80011ca:	e020      	b.n	800120e <HAL_RCC_OscConfig+0x2a6>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	4b99      	ldr	r3, [pc, #612]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4996      	ldr	r1, [pc, #600]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e6:	4b95      	ldr	r3, [pc, #596]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	061b      	lsls	r3, r3, #24
 80011f4:	4991      	ldr	r1, [pc, #580]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fc06 	bl	8001a10 <RCC_SetFlashLatencyFromMSIRange>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1d3      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	0b5b      	lsrs	r3, r3, #13
 8001214:	3301      	adds	r3, #1
 8001216:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800121e:	4a87      	ldr	r2, [pc, #540]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001220:	6892      	ldr	r2, [r2, #8]
 8001222:	0912      	lsrs	r2, r2, #4
 8001224:	f002 020f 	and.w	r2, r2, #15
 8001228:	4985      	ldr	r1, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x4d8>)
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800122e:	4a85      	ldr	r2, [pc, #532]	; (8001444 <HAL_RCC_OscConfig+0x4dc>)
 8001230:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001232:	4b85      	ldr	r3, [pc, #532]	; (8001448 <HAL_RCC_OscConfig+0x4e0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb92 	bl	8000960 <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d045      	beq.n	80012d2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	e1b5      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d029      	beq.n	80012a6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001252:	4b7e      	ldr	r3, [pc, #504]	; (800144c <HAL_RCC_OscConfig+0x4e4>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fbce 	bl	80009f8 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001260:	f7ff fbca 	bl	80009f8 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1a1      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001272:	4b72      	ldr	r3, [pc, #456]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127e:	4b6f      	ldr	r3, [pc, #444]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	496c      	ldr	r1, [pc, #432]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	061b      	lsls	r3, r3, #24
 800129e:	4967      	ldr	r1, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012a6:	4b69      	ldr	r3, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x4e4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fba4 	bl	80009f8 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b4:	f7ff fba0 	bl	80009f8 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e177      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d030      	beq.n	8001340 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b5a      	ldr	r3, [pc, #360]	; (8001450 <HAL_RCC_OscConfig+0x4e8>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fb84 	bl	80009f8 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fb80 	bl	80009f8 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e157      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001306:	4b4d      	ldr	r3, [pc, #308]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x38c>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb6d 	bl	80009f8 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fb69 	bl	80009f8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e140      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001334:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80b5 	beq.w	80014b8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10d      	bne.n	800137a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	4a36      	ldr	r2, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6253      	str	r3, [r2, #36]	; 0x24
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_RCC_OscConfig+0x4ec>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x4ec>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_RCC_OscConfig+0x4ec>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb31 	bl	80009f8 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139a:	f7ff fb2d 	bl	80009f8 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b64      	cmp	r3, #100	; 0x64
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e104      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_RCC_OscConfig+0x4ec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x466>
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6353      	str	r3, [r2, #52]	; 0x34
 80013cc:	e02d      	b.n	800142a <HAL_RCC_OscConfig+0x4c2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x488>
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e0:	6353      	str	r3, [r2, #52]	; 0x34
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013ec:	6353      	str	r3, [r2, #52]	; 0x34
 80013ee:	e01c      	b.n	800142a <HAL_RCC_OscConfig+0x4c2>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0x4aa>
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6353      	str	r3, [r2, #52]	; 0x34
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140e:	6353      	str	r3, [r2, #52]	; 0x34
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0x4c2>
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800141c:	6353      	str	r3, [r2, #52]	; 0x34
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_RCC_OscConfig+0x4d4>)
 8001424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001428:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d024      	beq.n	800147c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fae1 	bl	80009f8 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001438:	e019      	b.n	800146e <HAL_RCC_OscConfig+0x506>
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	080022d0 	.word	0x080022d0
 8001444:	20000000 	.word	0x20000000
 8001448:	20000004 	.word	0x20000004
 800144c:	42470020 	.word	0x42470020
 8001450:	42470680 	.word	0x42470680
 8001454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff face 	bl	80009f8 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0a3      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800146e:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 8001470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ee      	beq.n	8001458 <HAL_RCC_OscConfig+0x4f0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fabc 	bl	80009f8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fab8 	bl	80009f8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e08d      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d079      	beq.n	80015b4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d056      	beq.n	8001574 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d13b      	bne.n	8001546 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_RCC_OscConfig+0x65c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fa90 	bl	80009f8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fa8c 	bl	80009f8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e063      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	4319      	orrs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	430b      	orrs	r3, r1
 8001512:	492b      	ldr	r1, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_RCC_OscConfig+0x65c>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fa6b 	bl	80009f8 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fa67 	bl	80009f8 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e03e      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x5be>
 8001544:	e036      	b.n	80015b4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_RCC_OscConfig+0x65c>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fa54 	bl	80009f8 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fa50 	bl	80009f8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e027      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x5ec>
 8001572:	e01f      	b.n	80015b4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e01a      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_RCC_OscConfig+0x658>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	429a      	cmp	r2, r3
 8001592:	d10d      	bne.n	80015b0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470060 	.word	0x42470060

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e11a      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b8f      	ldr	r3, [pc, #572]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d919      	bls.n	800161e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_ClockConfig+0x34>
 80015f0:	4b8a      	ldr	r3, [pc, #552]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a89      	ldr	r2, [pc, #548]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 0201 	bic.w	r2, r3, #1
 8001604:	4985      	ldr	r1, [pc, #532]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0f9      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162a:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	497a      	ldr	r1, [pc, #488]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 808e 	beq.w	8001766 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001652:	4b73      	ldr	r3, [pc, #460]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d121      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0d7      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d115      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0cb      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001682:	4b67      	ldr	r3, [pc, #412]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0bf      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0b7      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a2:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f023 0203 	bic.w	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	495c      	ldr	r1, [pc, #368]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b4:	f7ff f9a0 	bl	80009f8 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff f998 	bl	80009f8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e09b      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d1ee      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xfc>
 80016e6:	e03e      	b.n	8001766 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d112      	bne.n	8001716 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff f981 	bl	80009f8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e084      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4b45      	ldr	r3, [pc, #276]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x12a>
 8001714:	e027      	b.n	8001766 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d11d      	bne.n	800175a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f96a 	bl	80009f8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e06d      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_ClockConfig+0x158>
 8001742:	e010      	b.n	8001766 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff f958 	bl	80009f8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e05b      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1ee      	bne.n	8001744 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d219      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d105      	bne.n	8001786 <HAL_RCC_ClockConfig+0x1be>
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0201 	bic.w	r2, r3, #1
 800178e:	4923      	ldr	r1, [pc, #140]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_RCC_ClockConfig+0x254>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e034      	b.n	8001812 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4917      	ldr	r1, [pc, #92]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490f      	ldr	r1, [pc, #60]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f823 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCC_ClockConfig+0x258>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490b      	ldr	r1, [pc, #44]	; (8001824 <HAL_RCC_ClockConfig+0x25c>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f8aa 	bl	8000960 <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001810:	7afb      	ldrb	r3, [r7, #11]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00
 8001820:	40023800 	.word	0x40023800
 8001824:	080022d0 	.word	0x080022d0
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001834:	b08e      	sub	sp, #56	; 0x38
 8001836:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_RCC_GetSysClockFreq+0x16c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d00d      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x34>
 8001848:	2b0c      	cmp	r3, #12
 800184a:	f200 8092 	bhi.w	8001972 <HAL_RCC_GetSysClockFreq+0x142>
 800184e:	2b04      	cmp	r3, #4
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x28>
 8001852:	2b08      	cmp	r3, #8
 8001854:	d003      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x2e>
 8001856:	e08c      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x170>)
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	e097      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x174>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001862:	e094      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x178>)
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	0d9b      	lsrs	r3, r3, #22
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	3301      	adds	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d021      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	2200      	movs	r2, #0
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	61fa      	str	r2, [r7, #28]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x174>)
 8001894:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001898:	464a      	mov	r2, r9
 800189a:	fb03 f202 	mul.w	r2, r3, r2
 800189e:	2300      	movs	r3, #0
 80018a0:	4644      	mov	r4, r8
 80018a2:	fb04 f303 	mul.w	r3, r4, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x174>)
 80018aa:	4644      	mov	r4, r8
 80018ac:	fba4 0102 	umull	r0, r1, r4, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	4619      	mov	r1, r3
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	2200      	movs	r2, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	617a      	str	r2, [r7, #20]
 80018bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c0:	f7fe fc5c 	bl	800017c <__aeabi_uldivmod>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4613      	mov	r3, r2
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
 80018cc:	e04e      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2200      	movs	r2, #0
 80018d2:	469a      	mov	sl, r3
 80018d4:	4693      	mov	fp, r2
 80018d6:	4652      	mov	r2, sl
 80018d8:	465b      	mov	r3, fp
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	0159      	lsls	r1, r3, #5
 80018e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e8:	0150      	lsls	r0, r2, #5
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ebb2 080a 	subs.w	r8, r2, sl
 80018f2:	eb63 090b 	sbc.w	r9, r3, fp
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001902:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001906:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800190a:	ebb2 0408 	subs.w	r4, r2, r8
 800190e:	eb63 0509 	sbc.w	r5, r3, r9
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	00eb      	lsls	r3, r5, #3
 800191c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001920:	00e2      	lsls	r2, r4, #3
 8001922:	4614      	mov	r4, r2
 8001924:	461d      	mov	r5, r3
 8001926:	eb14 030a 	adds.w	r3, r4, sl
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	eb45 030b 	adc.w	r3, r5, fp
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193e:	4629      	mov	r1, r5
 8001940:	028b      	lsls	r3, r1, #10
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	4604      	mov	r4, r0
 8001948:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800194c:	4601      	mov	r1, r0
 800194e:	028a      	lsls	r2, r1, #10
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	2200      	movs	r2, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	60fa      	str	r2, [r7, #12]
 800195c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001960:	f7fe fc0c 	bl	800017c <__aeabi_uldivmod>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4613      	mov	r3, r2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001970:	e00d      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0b5b      	lsrs	r3, r3, #13
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800198c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001990:	4618      	mov	r0, r3
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	016e3600 	.word	0x016e3600
 80019a8:	080022c4 	.word	0x080022c4

080019ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <HAL_RCC_GetHCLKFreq+0x10>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000000 	.word	0x20000000

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c4:	f7ff fff2 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4903      	ldr	r1, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	080022e0 	.word	0x080022e0

080019e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ec:	f7ff ffde 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0adb      	lsrs	r3, r3, #11
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	080022e0 	.word	0x080022e0

08001a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d12c      	bne.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e016      	b.n	8001a6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6253      	str	r3, [r2, #36]	; 0x24
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a60:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a74:	d105      	bne.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a7c:	d101      	bne.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 0201 	bic.w	r2, r3, #1
 8001a9c:	490b      	ldr	r1, [pc, #44]	; (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	40023c00 	.word	0x40023c00

08001ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e07b      	b.n	8001bda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d108      	bne.n	8001afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001af2:	d009      	beq.n	8001b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
 8001afa:	e005      	b.n	8001b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fdc6 	bl	80006b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	ea42 0103 	orr.w	r1, r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	f003 0104 	and.w	r1, r3, #4
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f003 0210 	and.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b088      	sub	sp, #32
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_SPI_Transmit+0x22>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e126      	b.n	8001e52 <HAL_SPI_Transmit+0x270>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c0c:	f7fe fef4 	bl	80009f8 <HAL_GetTick>
 8001c10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d002      	beq.n	8001c28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c26:	e10b      	b.n	8001e40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_SPI_Transmit+0x52>
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c38:	e102      	b.n	8001e40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c80:	d10f      	bne.n	8001ca2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b40      	cmp	r3, #64	; 0x40
 8001cae:	d007      	beq.n	8001cc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc8:	d14b      	bne.n	8001d62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_SPI_Transmit+0xf6>
 8001cd2:	8afb      	ldrh	r3, [r7, #22]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d13e      	bne.n	8001d56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	1c9a      	adds	r2, r3, #2
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cfc:	e02b      	b.n	8001d56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d112      	bne.n	8001d32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	1c9a      	adds	r2, r3, #2
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d30:	e011      	b.n	8001d56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d32:	f7fe fe61 	bl	80009f8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d803      	bhi.n	8001d4a <HAL_SPI_Transmit+0x168>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d102      	bne.n	8001d50 <HAL_SPI_Transmit+0x16e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d54:	e074      	b.n	8001e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ce      	bne.n	8001cfe <HAL_SPI_Transmit+0x11c>
 8001d60:	e04c      	b.n	8001dfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_SPI_Transmit+0x18e>
 8001d6a:	8afb      	ldrh	r3, [r7, #22]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d140      	bne.n	8001df2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d96:	e02c      	b.n	8001df2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d113      	bne.n	8001dce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	330c      	adds	r3, #12
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dcc:	e011      	b.n	8001df2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dce:	f7fe fe13 	bl	80009f8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d803      	bhi.n	8001de6 <HAL_SPI_Transmit+0x204>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d102      	bne.n	8001dec <HAL_SPI_Transmit+0x20a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001df0:	e026      	b.n	8001e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1cd      	bne.n	8001d98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f8b3 	bl	8001f6c <SPI_EndRxTxTransaction>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	77fb      	strb	r3, [r7, #31]
 8001e3c:	e000      	b.n	8001e40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e6c:	f7fe fdc4 	bl	80009f8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e7c:	f7fe fdbc 	bl	80009f8 <HAL_GetTick>
 8001e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	015b      	lsls	r3, r3, #5
 8001e88:	0d1b      	lsrs	r3, r3, #20
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e92:	e054      	b.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d050      	beq.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e9c:	f7fe fdac 	bl	80009f8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d902      	bls.n	8001eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d13d      	bne.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eca:	d111      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed4:	d004      	beq.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d107      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef8:	d10f      	bne.n	8001f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e017      	b.n	8001f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4013      	ands	r3, r2
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d19b      	bne.n	8001e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000000 	.word	0x20000000

08001f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <SPI_EndRxTxTransaction+0x7c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <SPI_EndRxTxTransaction+0x80>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f96:	d112      	bne.n	8001fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff ff5a 	bl	8001e5c <SPI_WaitFlagStateUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e00f      	b.n	8001fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d0f2      	beq.n	8001fbe <SPI_EndRxTxTransaction+0x52>
 8001fd8:	e000      	b.n	8001fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8001fda:	bf00      	nop
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	165e9f81 	.word	0x165e9f81

08001ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e03f      	b.n	8002082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fc20 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2224      	movs	r2, #36	; 0x24
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f829 	bl	800208c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020cc:	f023 030c 	bic.w	r3, r3, #12
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	430b      	orrs	r3, r1
 80020d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a55      	ldr	r2, [pc, #340]	; (800224c <UART_SetConfig+0x1c0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d103      	bne.n	8002102 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020fa:	f7ff fc75 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	e002      	b.n	8002108 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002102:	f7ff fc5d 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 8002106:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002110:	d14c      	bne.n	80021ac <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	009a      	lsls	r2, r3, #2
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	4a49      	ldr	r2, [pc, #292]	; (8002250 <UART_SetConfig+0x1c4>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	0119      	lsls	r1, r3, #4
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	009a      	lsls	r2, r3, #2
 800213c:	441a      	add	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fbb2 f2f3 	udiv	r2, r2, r3
 8002148:	4b41      	ldr	r3, [pc, #260]	; (8002250 <UART_SetConfig+0x1c4>)
 800214a:	fba3 0302 	umull	r0, r3, r3, r2
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2064      	movs	r0, #100	; 0x64
 8002152:	fb00 f303 	mul.w	r3, r0, r3
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	3332      	adds	r3, #50	; 0x32
 800215c:	4a3c      	ldr	r2, [pc, #240]	; (8002250 <UART_SetConfig+0x1c4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800216a:	4419      	add	r1, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009a      	lsls	r2, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <UART_SetConfig+0x1c4>)
 8002184:	fba3 0302 	umull	r0, r3, r3, r2
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	2064      	movs	r0, #100	; 0x64
 800218c:	fb00 f303 	mul.w	r3, r0, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	3332      	adds	r3, #50	; 0x32
 8002196:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <UART_SetConfig+0x1c4>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	f003 0207 	and.w	r2, r3, #7
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	440a      	add	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021aa:	e04a      	b.n	8002242 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009a      	lsls	r2, r3, #2
 80021b6:	441a      	add	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4a23      	ldr	r2, [pc, #140]	; (8002250 <UART_SetConfig+0x1c4>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	0119      	lsls	r1, r3, #4
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	009a      	lsls	r2, r3, #2
 80021d6:	441a      	add	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <UART_SetConfig+0x1c4>)
 80021e4:	fba3 0302 	umull	r0, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2064      	movs	r0, #100	; 0x64
 80021ec:	fb00 f303 	mul.w	r3, r0, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a16      	ldr	r2, [pc, #88]	; (8002250 <UART_SetConfig+0x1c4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002202:	4419      	add	r1, r3
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009a      	lsls	r2, r3, #2
 800220e:	441a      	add	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	fbb2 f2f3 	udiv	r2, r2, r3
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <UART_SetConfig+0x1c4>)
 800221c:	fba3 0302 	umull	r0, r3, r3, r2
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	2064      	movs	r0, #100	; 0x64
 8002224:	fb00 f303 	mul.w	r3, r0, r3
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	3332      	adds	r3, #50	; 0x32
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <UART_SetConfig+0x1c4>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	f003 020f 	and.w	r2, r3, #15
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	440a      	add	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40013800 	.word	0x40013800
 8002250:	51eb851f 	.word	0x51eb851f

08002254 <__libc_init_array>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	2600      	movs	r6, #0
 8002258:	4d0c      	ldr	r5, [pc, #48]	; (800228c <__libc_init_array+0x38>)
 800225a:	4c0d      	ldr	r4, [pc, #52]	; (8002290 <__libc_init_array+0x3c>)
 800225c:	1b64      	subs	r4, r4, r5
 800225e:	10a4      	asrs	r4, r4, #2
 8002260:	42a6      	cmp	r6, r4
 8002262:	d109      	bne.n	8002278 <__libc_init_array+0x24>
 8002264:	f000 f822 	bl	80022ac <_init>
 8002268:	2600      	movs	r6, #0
 800226a:	4d0a      	ldr	r5, [pc, #40]	; (8002294 <__libc_init_array+0x40>)
 800226c:	4c0a      	ldr	r4, [pc, #40]	; (8002298 <__libc_init_array+0x44>)
 800226e:	1b64      	subs	r4, r4, r5
 8002270:	10a4      	asrs	r4, r4, #2
 8002272:	42a6      	cmp	r6, r4
 8002274:	d105      	bne.n	8002282 <__libc_init_array+0x2e>
 8002276:	bd70      	pop	{r4, r5, r6, pc}
 8002278:	f855 3b04 	ldr.w	r3, [r5], #4
 800227c:	4798      	blx	r3
 800227e:	3601      	adds	r6, #1
 8002280:	e7ee      	b.n	8002260 <__libc_init_array+0xc>
 8002282:	f855 3b04 	ldr.w	r3, [r5], #4
 8002286:	4798      	blx	r3
 8002288:	3601      	adds	r6, #1
 800228a:	e7f2      	b.n	8002272 <__libc_init_array+0x1e>
 800228c:	080022f0 	.word	0x080022f0
 8002290:	080022f0 	.word	0x080022f0
 8002294:	080022f0 	.word	0x080022f0
 8002298:	080022f4 	.word	0x080022f4

0800229c <memset>:
 800229c:	4603      	mov	r3, r0
 800229e:	4402      	add	r2, r0
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d100      	bne.n	80022a6 <memset+0xa>
 80022a4:	4770      	bx	lr
 80022a6:	f803 1b01 	strb.w	r1, [r3], #1
 80022aa:	e7f9      	b.n	80022a0 <memset+0x4>

080022ac <_init>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	bf00      	nop
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr

080022b8 <_fini>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	bf00      	nop
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr
