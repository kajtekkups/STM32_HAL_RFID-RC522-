
ir_communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c18  08002c18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002c34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002c34  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2aa  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e28  00000000  00000000  0002b2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cc1  00000000  00000000  0002e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d48c  00000000  00000000  000305c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894c9  00000000  00000000  0003da4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6f16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000c6f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002bdc 	.word	0x08002bdc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002bdc 	.word	0x08002bdc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b27      	ldr	r3, [pc, #156]	; (8000538 <MX_GPIO_Init+0xb4>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a26      	ldr	r2, [pc, #152]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004d0:	f043 0302 	orr.w	r3, r3, #2
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_GPIO_Init+0xb4>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2102      	movs	r1, #2
 80004e6:	4815      	ldr	r0, [pc, #84]	; (800053c <MX_GPIO_Init+0xb8>)
 80004e8:	f000 fdb0 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	4813      	ldr	r0, [pc, #76]	; (8000540 <MX_GPIO_Init+0xbc>)
 80004f2:	f000 fdab 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80004f6:	2302      	movs	r3, #2
 80004f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <MX_GPIO_Init+0xb8>)
 800050e:	f000 fc0d 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000512:	2320      	movs	r3, #32
 8000514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_GPIO_Init+0xbc>)
 800052a:	f000 fbff 	bl	8000d2c <HAL_GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800
 800053c:	40020800 	.word	0x40020800
 8000540:	40020000 	.word	0x40020000

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fa9d 	bl	8000a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f812 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f7ff ff98 	bl	8000484 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000554:	f000 f938 	bl	80007c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000558:	f000 fa02 	bl	8000960 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800055c:	f000 f85e 	bl	800061c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim2);
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <main+0x2c>)
 8000562:	f001 fbc8 	bl	8001cf6 <HAL_TIM_Base_Init>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000566:	2100      	movs	r1, #0
 8000568:	4801      	ldr	r0, [pc, #4]	; (8000570 <main+0x2c>)
 800056a:	f001 fc4b 	bl	8001e04 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056e:	e7fe      	b.n	800056e <main+0x2a>
 8000570:	20000080 	.word	0x20000080

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	; 0x48
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fb22 	bl	8002bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <SystemClock_Config+0x98>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800059e:	4a1b      	ldr	r2, [pc, #108]	; (800060c <SystemClock_Config+0x98>)
 80005a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fd56 	bl	800107c <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d6:	f000 f81b 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2101      	movs	r1, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f872 	bl	80016dc <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fe:	f000 f807 	bl	8000610 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3748      	adds	r7, #72	; 0x48
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40007000 	.word	0x40007000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_SPI2_Init+0x64>)
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_SPI2_Init+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_SPI2_Init+0x64>)
 8000628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800062c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_SPI2_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_SPI2_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_SPI2_Init+0x64>)
 800063c:	2202      	movs	r2, #2
 800063e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_SPI2_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_SPI2_Init+0x64>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SPI2_Init+0x64>)
 8000650:	2208      	movs	r2, #8
 8000652:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_SPI2_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SPI2_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_SPI2_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SPI2_Init+0x64>)
 8000668:	220a      	movs	r2, #10
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_SPI2_Init+0x64>)
 800066e:	f001 fab9 	bl	8001be4 <HAL_SPI_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000678:	f7ff ffca 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40003800 	.word	0x40003800

08000688 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <HAL_SPI_MspInit+0x7c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d128      	bne.n	80006fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_SPI_MspInit+0x80>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <HAL_SPI_MspInit+0x80>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6253      	str	r3, [r2, #36]	; 0x24
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_SPI_MspInit+0x80>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_SPI_MspInit+0x80>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <HAL_SPI_MspInit+0x80>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HAL_SPI_MspInit+0x80>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ec:	2305      	movs	r3, #5
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_SPI_MspInit+0x84>)
 80006f8:	f000 fb18 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40003800 	.word	0x40003800
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_MspInit+0x58>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <HAL_MspInit+0x58>)
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	6253      	str	r3, [r2, #36]	; 0x24
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_MspInit+0x58>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_MspInit+0x58>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <HAL_MspInit+0x58>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6213      	str	r3, [r2, #32]
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_MspInit+0x58>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x58>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_MspInit+0x58>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_MspInit+0x58>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40023800 	.word	0x40023800

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f9bb 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000808:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MX_TIM2_Init+0x110>)
 800080c:	2220      	movs	r2, #32
 800080e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082a:	482b      	ldr	r0, [pc, #172]	; (80008d8 <MX_TIM2_Init+0x110>)
 800082c:	f001 fa63 	bl	8001cf6 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000836:	f7ff feeb 	bl	8000610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000844:	4619      	mov	r1, r3
 8000846:	4824      	ldr	r0, [pc, #144]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000848:	f001 fc3a 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000852:	f7ff fedd 	bl	8000610 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000856:	4820      	ldr	r0, [pc, #128]	; (80008d8 <MX_TIM2_Init+0x110>)
 8000858:	f001 fa8c 	bl	8001d74 <HAL_TIM_IC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000862:	f7ff fed5 	bl	8000610 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000866:	2304      	movs	r3, #4
 8000868:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4816      	ldr	r0, [pc, #88]	; (80008d8 <MX_TIM2_Init+0x110>)
 800087e:	f001 fce3 	bl	8002248 <HAL_TIM_SlaveConfigSynchro>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000888:	f7ff fec2 	bl	8000610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_TIM2_Init+0x110>)
 800089c:	f001 ffe2 	bl	8002864 <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80008a6:	f7ff feb3 	bl	8000610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008aa:	230a      	movs	r3, #10
 80008ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_TIM2_Init+0x110>)
 80008c2:	f001 fb69 	bl	8001f98 <HAL_TIM_IC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80008cc:	f7ff fea0 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3740      	adds	r7, #64	; 0x40
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000080 	.word	0x20000080

080008dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fc:	d127      	bne.n	800094e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <HAL_TIM_Base_MspInit+0x7c>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <HAL_TIM_Base_MspInit+0x7c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6253      	str	r3, [r2, #36]	; 0x24
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_TIM_Base_MspInit+0x7c>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_TIM_Base_MspInit+0x7c>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_TIM_Base_MspInit+0x7c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_TIM_Base_MspInit+0x7c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP1     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800092e:	2301      	movs	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800093e:	2301      	movs	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <HAL_TIM_Base_MspInit+0x80>)
 800094a:	f000 f9ef 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART2_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000998:	f001 ffc2 	bl	8002920 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f7ff fe35 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000c0 	.word	0x200000c0
 80009b0:	40004400 	.word	0x40004400

080009b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x7c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d127      	bne.n	8000a26 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x80>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <HAL_UART_MspInit+0x80>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	6253      	str	r3, [r2, #36]	; 0x24
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0x80>)
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x80>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x80>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x80>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x84>)
 8000a22:	f000 f983 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a62:	f7ff feaa 	bl	80007ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 f88d 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff fd6b 	bl	8000544 <main>
  bx lr
 8000a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a78:	08002c28 	.word	0x08002c28
  ldr r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a80:	20000108 	.word	0x20000108

08000a84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_IRQHandler>

08000a86 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f917 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f80e 	bl	8000ab8 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e001      	b.n	8000aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa8:	f7ff fe32 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aac:	79fb      	ldrb	r3, [r7, #7]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_InitTick+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d022      	beq.n	8000b12 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_InitTick+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f916 	bl	8000d12 <HAL_SYSTICK_Config>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10f      	bne.n	8000b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d809      	bhi.n	8000b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	2200      	movs	r2, #0
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295
 8000afa:	f000 f8ee 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0x70>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	e004      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e001      	b.n	8000b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000104 	.word	0x20000104
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000104 	.word	0x20000104

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff90 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff49 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5e 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff90 	bl	8000c1c <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5f 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d42:	e160      	b.n	8001006 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 8152 	beq.w	8001000 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0203 	and.w	r2, r3, #3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80ac 	beq.w	8001000 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea8:	4b5e      	ldr	r3, [pc, #376]	; (8001024 <HAL_GPIO_Init+0x2f8>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4a5d      	ldr	r2, [pc, #372]	; (8001024 <HAL_GPIO_Init+0x2f8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6213      	str	r3, [r2, #32]
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <HAL_GPIO_Init+0x2f8>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ec0:	4a59      	ldr	r2, [pc, #356]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a51      	ldr	r2, [pc, #324]	; (800102c <HAL_GPIO_Init+0x300>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d025      	beq.n	8000f38 <HAL_GPIO_Init+0x20c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a50      	ldr	r2, [pc, #320]	; (8001030 <HAL_GPIO_Init+0x304>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d01f      	beq.n	8000f34 <HAL_GPIO_Init+0x208>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a4f      	ldr	r2, [pc, #316]	; (8001034 <HAL_GPIO_Init+0x308>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d019      	beq.n	8000f30 <HAL_GPIO_Init+0x204>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4e      	ldr	r2, [pc, #312]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d013      	beq.n	8000f2c <HAL_GPIO_Init+0x200>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4d      	ldr	r2, [pc, #308]	; (800103c <HAL_GPIO_Init+0x310>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <HAL_GPIO_Init+0x1fc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <HAL_GPIO_Init+0x314>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x1f8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <HAL_GPIO_Init+0x318>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_GPIO_Init+0x1f4>
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	e00c      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f20:	2307      	movs	r3, #7
 8000f22:	e00a      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f24:	2305      	movs	r3, #5
 8000f26:	e008      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f28:	2304      	movs	r3, #4
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f4a:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fa6:	4a28      	ldr	r2, [pc, #160]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fd0:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f ae97 	bne.w	8000d44 <HAL_GPIO_Init+0x18>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40010000 	.word	0x40010000
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e31d      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108e:	4b94      	ldr	r3, [pc, #592]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001098:	4b91      	ldr	r3, [pc, #580]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d07b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d006      	beq.n	80010c2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d10f      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d10b      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	4b87      	ldr	r3, [pc, #540]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d06a      	beq.n	80011a4 <HAL_RCC_OscConfig+0x128>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d166      	bne.n	80011a4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e2f7      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d106      	bne.n	80010f0 <HAL_RCC_OscConfig+0x74>
 80010e2:	4b7f      	ldr	r3, [pc, #508]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7e      	ldr	r2, [pc, #504]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e02d      	b.n	800114c <HAL_RCC_OscConfig+0xd0>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x96>
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a78      	ldr	r2, [pc, #480]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a75      	ldr	r2, [pc, #468]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0xd0>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0xb8>
 800111a:	4b71      	ldr	r3, [pc, #452]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a70      	ldr	r2, [pc, #448]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6d      	ldr	r2, [pc, #436]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xd0>
 8001134:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a69      	ldr	r2, [pc, #420]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b67      	ldr	r3, [pc, #412]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a66      	ldr	r2, [pc, #408]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fcfc 	bl	8000b50 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fcf8 	bl	8000b50 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e2ad      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xe0>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fce8 	bl	8000b50 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fce4 	bl	8000b50 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e299      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001196:	4b52      	ldr	r3, [pc, #328]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x108>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d05a      	beq.n	8001268 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d119      	bne.n	80011f2 <HAL_RCC_OscConfig+0x176>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d116      	bne.n	80011f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_OscConfig+0x160>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e276      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	493d      	ldr	r1, [pc, #244]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	e03a      	b.n	8001268 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d020      	beq.n	800123c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <HAL_RCC_OscConfig+0x268>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fca6 	bl	8000b50 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001208:	f7ff fca2 	bl	8000b50 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e257      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	492a      	ldr	r1, [pc, #168]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
 800123a:	e015      	b.n	8001268 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_RCC_OscConfig+0x268>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fc85 	bl	8000b50 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fc81 	bl	8000b50 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e236      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80b8 	beq.w	80013e6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d170      	bne.n	800135e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x218>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e21a      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1a      	ldr	r2, [r3, #32]
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d921      	bls.n	80012e8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fc3b 	bl	8001b24 <RCC_SetFlashLatencyFromMSIRange>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e208      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	4901      	ldr	r1, [pc, #4]	; (80012e0 <HAL_RCC_OscConfig+0x264>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
 80012de:	e020      	b.n	8001322 <HAL_RCC_OscConfig+0x2a6>
 80012e0:	40023800 	.word	0x40023800
 80012e4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4996      	ldr	r1, [pc, #600]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fa:	4b95      	ldr	r3, [pc, #596]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	061b      	lsls	r3, r3, #24
 8001308:	4991      	ldr	r1, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fc06 	bl	8001b24 <RCC_SetFlashLatencyFromMSIRange>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1d3      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	0b5b      	lsrs	r3, r3, #13
 8001328:	3301      	adds	r3, #1
 800132a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001334:	6892      	ldr	r2, [r2, #8]
 8001336:	0912      	lsrs	r2, r2, #4
 8001338:	f002 020f 	and.w	r2, r2, #15
 800133c:	4985      	ldr	r1, [pc, #532]	; (8001554 <HAL_RCC_OscConfig+0x4d8>)
 800133e:	5c8a      	ldrb	r2, [r1, r2]
 8001340:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001342:	4a85      	ldr	r2, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x4dc>)
 8001344:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_RCC_OscConfig+0x4e0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fbb4 	bl	8000ab8 <HAL_InitTick>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d045      	beq.n	80013e6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	e1b5      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d029      	beq.n	80013ba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001366:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x4e4>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fbf0 	bl	8000b50 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001374:	f7ff fbec 	bl	8000b50 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1a1      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	496c      	ldr	r1, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	4967      	ldr	r1, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ba:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x4e4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbc6 	bl	8000b50 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbc2 	bl	8000b50 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e177      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d030      	beq.n	8001454 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b5a      	ldr	r3, [pc, #360]	; (8001564 <HAL_RCC_OscConfig+0x4e8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fba6 	bl	8000b50 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fba2 	bl	8000b50 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e157      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x38c>
 8001426:	e015      	b.n	8001454 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <HAL_RCC_OscConfig+0x4e8>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb8f 	bl	8000b50 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fb8b 	bl	8000b50 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e140      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001448:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80b5 	beq.w	80015cc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10d      	bne.n	800148e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	4a36      	ldr	r2, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6253      	str	r3, [r2, #36]	; 0x24
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x4ec>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x4ec>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_RCC_OscConfig+0x4ec>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fb53 	bl	8000b50 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7ff fb4f 	bl	8000b50 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	; 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e104      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_RCC_OscConfig+0x4ec>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x466>
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6353      	str	r3, [r2, #52]	; 0x34
 80014e0:	e02d      	b.n	800153e <HAL_RCC_OscConfig+0x4c2>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x488>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80014f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f4:	6353      	str	r3, [r2, #52]	; 0x34
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 80014fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001500:	6353      	str	r3, [r2, #52]	; 0x34
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x4c2>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x4aa>
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6353      	str	r3, [r2, #52]	; 0x34
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6353      	str	r3, [r2, #52]	; 0x34
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x4c2>
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001530:	6353      	str	r3, [r2, #52]	; 0x34
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_RCC_OscConfig+0x4d4>)
 8001538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800153c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d024      	beq.n	8001590 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb03 	bl	8000b50 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154c:	e019      	b.n	8001582 <HAL_RCC_OscConfig+0x506>
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	08002c00 	.word	0x08002c00
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004
 8001560:	42470020 	.word	0x42470020
 8001564:	42470680 	.word	0x42470680
 8001568:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff faf0 	bl	8000b50 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0a3      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x4f0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fade 	bl	8000b50 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fada 	bl	8000b50 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e08d      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d079      	beq.n	80016c8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d056      	beq.n	8001688 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d13b      	bne.n	800165a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x65c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fab2 	bl	8000b50 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff faae 	bl	8000b50 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e063      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	4319      	orrs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	430b      	orrs	r3, r1
 8001626:	492b      	ldr	r1, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x65c>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fa8d 	bl	8000b50 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fa89 	bl	8000b50 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e03e      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x5be>
 8001658:	e036      	b.n	80016c8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_RCC_OscConfig+0x65c>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fa76 	bl	8000b50 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fa72 	bl	8000b50 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e027      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x5ec>
 8001686:	e01f      	b.n	80016c8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e01a      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x658>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470060 	.word	0x42470060

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e11a      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b8f      	ldr	r3, [pc, #572]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d919      	bls.n	8001732 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_ClockConfig+0x34>
 8001704:	4b8a      	ldr	r3, [pc, #552]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a89      	ldr	r2, [pc, #548]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b87      	ldr	r3, [pc, #540]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 0201 	bic.w	r2, r3, #1
 8001718:	4985      	ldr	r1, [pc, #532]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001720:	4b83      	ldr	r3, [pc, #524]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0f9      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173e:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	497a      	ldr	r1, [pc, #488]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 808e 	beq.w	800187a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001766:	4b73      	ldr	r3, [pc, #460]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d121      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0d7      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800177e:	4b6d      	ldr	r3, [pc, #436]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0cb      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001796:	4b67      	ldr	r3, [pc, #412]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0bf      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017a6:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0b7      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b6:	4b5f      	ldr	r3, [pc, #380]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 0203 	bic.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	495c      	ldr	r1, [pc, #368]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c8:	f7ff f9c2 	bl	8000b50 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d112      	bne.n	80017fc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff f9ba 	bl	8000b50 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e09b      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xfc>
 80017fa:	e03e      	b.n	800187a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d112      	bne.n	800182a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	e00a      	b.n	800181c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f9a3 	bl	8000b50 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e084      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b45      	ldr	r3, [pc, #276]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b0c      	cmp	r3, #12
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_ClockConfig+0x12a>
 8001828:	e027      	b.n	800187a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d11d      	bne.n	800186e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff f98c 	bl	8000b50 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e06d      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d1ee      	bne.n	8001834 <HAL_RCC_ClockConfig+0x158>
 8001856:	e010      	b.n	800187a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f97a 	bl	8000b50 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e05b      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ee      	bne.n	8001858 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d219      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_ClockConfig+0x1be>
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0201 	bic.w	r2, r3, #1
 80018a2:	4923      	ldr	r1, [pc, #140]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_RCC_ClockConfig+0x254>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e034      	b.n	8001926 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4917      	ldr	r1, [pc, #92]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490f      	ldr	r1, [pc, #60]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f823 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_RCC_ClockConfig+0x258>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490b      	ldr	r1, [pc, #44]	; (8001938 <HAL_RCC_ClockConfig+0x25c>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x260>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x264>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f8cc 	bl	8000ab8 <HAL_InitTick>
 8001920:	4603      	mov	r3, r0
 8001922:	72fb      	strb	r3, [r7, #11]

  return status;
 8001924:	7afb      	ldrb	r3, [r7, #11]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08002c00 	.word	0x08002c00
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b08e      	sub	sp, #56	; 0x38
 800194a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800194c:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 800195c:	2b0c      	cmp	r3, #12
 800195e:	f200 8092 	bhi.w	8001a86 <HAL_RCC_GetSysClockFreq+0x142>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x28>
 8001966:	2b08      	cmp	r3, #8
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x2e>
 800196a:	e08c      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x170>)
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001970:	e097      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x174>)
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001976:	e094      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	f003 020f 	and.w	r2, r3, #15
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_RCC_GetSysClockFreq+0x178>)
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	0d9b      	lsrs	r3, r3, #22
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d021      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	2200      	movs	r2, #0
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	61fa      	str	r2, [r7, #28]
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x174>)
 80019a8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019ac:	464a      	mov	r2, r9
 80019ae:	fb03 f202 	mul.w	r2, r3, r2
 80019b2:	2300      	movs	r3, #0
 80019b4:	4644      	mov	r4, r8
 80019b6:	fb04 f303 	mul.w	r3, r4, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x174>)
 80019be:	4644      	mov	r4, r8
 80019c0:	fba4 0102 	umull	r0, r1, r4, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	4619      	mov	r1, r3
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	2200      	movs	r2, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	617a      	str	r2, [r7, #20]
 80019d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019d4:	f7fe fbd2 	bl	800017c <__aeabi_uldivmod>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4613      	mov	r3, r2
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
 80019e0:	e04e      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	2200      	movs	r2, #0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4693      	mov	fp, r2
 80019ea:	4652      	mov	r2, sl
 80019ec:	465b      	mov	r3, fp
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	0159      	lsls	r1, r3, #5
 80019f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fc:	0150      	lsls	r0, r2, #5
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	ebb2 080a 	subs.w	r8, r2, sl
 8001a06:	eb63 090b 	sbc.w	r9, r3, fp
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a1e:	ebb2 0408 	subs.w	r4, r2, r8
 8001a22:	eb63 0509 	sbc.w	r5, r3, r9
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	00eb      	lsls	r3, r5, #3
 8001a30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a34:	00e2      	lsls	r2, r4, #3
 8001a36:	4614      	mov	r4, r2
 8001a38:	461d      	mov	r5, r3
 8001a3a:	eb14 030a 	adds.w	r3, r4, sl
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	eb45 030b 	adc.w	r3, r5, fp
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a52:	4629      	mov	r1, r5
 8001a54:	028b      	lsls	r3, r1, #10
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a60:	4601      	mov	r1, r0
 8001a62:	028a      	lsls	r2, r1, #10
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	60fa      	str	r2, [r7, #12]
 8001a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a74:	f7fe fb82 	bl	800017c <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a84:	e00d      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0b5b      	lsrs	r3, r3, #13
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	3301      	adds	r3, #1
 8001a96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3738      	adds	r7, #56	; 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	016e3600 	.word	0x016e3600
 8001abc:	08002bf4 	.word	0x08002bf4

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08002c10 	.word	0x08002c10

08001afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0adb      	lsrs	r3, r3, #11
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08002c10 	.word	0x08002c10

08001b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d12c      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e016      	b.n	8001b82 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6253      	str	r3, [r2, #36]	; 0x24
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b74:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b88:	d105      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b90:	d101      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b92:	2301      	movs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 0201 	bic.w	r2, r3, #1
 8001bb0:	490b      	ldr	r1, [pc, #44]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07b      	b.n	8001cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c06:	d009      	beq.n	8001c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fd26 	bl	8000688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	ea42 0103 	orr.w	r1, r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0104 	and.w	r1, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0210 	and.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e031      	b.n	8001d6c <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7fe fddd 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f000 fac9 	bl	80022cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e031      	b.n	8001dea <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f829 	bl	8001df2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 fa8a 	bl	80022cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_IC_Start_IT+0x1a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e013      	b.n	8001e46 <HAL_TIM_IC_Start_IT+0x42>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_IC_Start_IT+0x2a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	e00b      	b.n	8001e46 <HAL_TIM_IC_Start_IT+0x42>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_IC_Start_IT+0x3a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e003      	b.n	8001e46 <HAL_TIM_IC_Start_IT+0x42>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e097      	b.n	8001f82 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_IC_Start_IT+0x5e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001e60:	e013      	b.n	8001e8a <HAL_TIM_IC_Start_IT+0x86>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_IC_Start_IT+0x6e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001e70:	e00b      	b.n	8001e8a <HAL_TIM_IC_Start_IT+0x86>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d104      	bne.n	8001e82 <HAL_TIM_IC_Start_IT+0x7e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e80:	e003      	b.n	8001e8a <HAL_TIM_IC_Start_IT+0x86>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d841      	bhi.n	8001f14 <HAL_TIM_IC_Start_IT+0x110>
 8001e90:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <HAL_TIM_IC_Start_IT+0x94>)
 8001e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e96:	bf00      	nop
 8001e98:	08001ecd 	.word	0x08001ecd
 8001e9c:	08001f15 	.word	0x08001f15
 8001ea0:	08001f15 	.word	0x08001f15
 8001ea4:	08001f15 	.word	0x08001f15
 8001ea8:	08001edf 	.word	0x08001edf
 8001eac:	08001f15 	.word	0x08001f15
 8001eb0:	08001f15 	.word	0x08001f15
 8001eb4:	08001f15 	.word	0x08001f15
 8001eb8:	08001ef1 	.word	0x08001ef1
 8001ebc:	08001f15 	.word	0x08001f15
 8001ec0:	08001f15 	.word	0x08001f15
 8001ec4:	08001f15 	.word	0x08001f15
 8001ec8:	08001f03 	.word	0x08001f03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0202 	orr.w	r2, r2, #2
 8001eda:	60da      	str	r2, [r3, #12]
      break;
 8001edc:	e01b      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0204 	orr.w	r2, r2, #4
 8001eec:	60da      	str	r2, [r3, #12]
      break;
 8001eee:	e012      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	60da      	str	r2, [r3, #12]
      break;
 8001f00:	e009      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0210 	orr.w	r2, r2, #16
 8001f10:	60da      	str	r2, [r3, #12]
      break;
 8001f12:	e000      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 8001f14:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fc7b 	bl	800281a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d00e      	beq.n	8001f4c <HAL_TIM_IC_Start_IT+0x148>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_TIM_IC_Start_IT+0x188>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_TIM_IC_Start_IT+0x148>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_TIM_IC_Start_IT+0x18c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_TIM_IC_Start_IT+0x148>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_TIM_IC_Start_IT+0x190>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d111      	bne.n	8001f70 <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d010      	beq.n	8001f80 <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	e007      	b.n	8001f80 <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40010800 	.word	0x40010800

08001f98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e082      	b.n	80020b8 <HAL_TIM_IC_ConfigChannel+0x120>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f000 fa7a 	bl	80024c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020c 	bic.w	r2, r2, #12
 8001fe2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6999      	ldr	r1, [r3, #24]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	619a      	str	r2, [r3, #24]
 8001ff6:	e05a      	b.n	80020ae <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d11c      	bne.n	8002038 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f000 fae9 	bl	80025e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002020:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6999      	ldr	r1, [r3, #24]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	021a      	lsls	r2, r3, #8
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	e03a      	b.n	80020ae <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11b      	bne.n	8002076 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f000 fb34 	bl	80026ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 020c 	bic.w	r2, r2, #12
 8002060:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69d9      	ldr	r1, [r3, #28]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	61da      	str	r2, [r3, #28]
 8002074:	e01b      	b.n	80020ae <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f000 fb53 	bl	8002730 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002098:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69d9      	ldr	r1, [r3, #28]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	021a      	lsls	r2, r3, #8
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_TIM_ConfigClockSource+0x18>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0b3      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x180>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002110:	d03e      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xd0>
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	f200 8087 	bhi.w	8002228 <HAL_TIM_ConfigClockSource+0x168>
 800211a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211e:	f000 8085 	beq.w	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002126:	d87f      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002128:	2b70      	cmp	r3, #112	; 0x70
 800212a:	d01a      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0xa2>
 800212c:	2b70      	cmp	r3, #112	; 0x70
 800212e:	d87b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002130:	2b60      	cmp	r3, #96	; 0x60
 8002132:	d050      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x116>
 8002134:	2b60      	cmp	r3, #96	; 0x60
 8002136:	d877      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002138:	2b50      	cmp	r3, #80	; 0x50
 800213a:	d03c      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xf6>
 800213c:	2b50      	cmp	r3, #80	; 0x50
 800213e:	d873      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d058      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0x136>
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d86f      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002148:	2b30      	cmp	r3, #48	; 0x30
 800214a:	d064      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x156>
 800214c:	2b30      	cmp	r3, #48	; 0x30
 800214e:	d86b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002150:	2b20      	cmp	r3, #32
 8002152:	d060      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x156>
 8002154:	2b20      	cmp	r3, #32
 8002156:	d867      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d05c      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x156>
 800215c:	2b10      	cmp	r3, #16
 800215e:	d05a      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002160:	e062      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f000 fb33 	bl	80027dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002184:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	609a      	str	r2, [r3, #8]
      break;
 800218e:	e04e      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f000 fb1c 	bl	80027dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b2:	609a      	str	r2, [r3, #8]
      break;
 80021b4:	e03b      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f000 f9e0 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2150      	movs	r1, #80	; 0x50
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 faea 	bl	80027a8 <TIM_ITRx_SetConfig>
      break;
 80021d4:	e02b      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f000 fa3a 	bl	800265c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2160      	movs	r1, #96	; 0x60
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fada 	bl	80027a8 <TIM_ITRx_SetConfig>
      break;
 80021f4:	e01b      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	461a      	mov	r2, r3
 8002204:	f000 f9c0 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	4618      	mov	r0, r3
 8002210:	f000 faca 	bl	80027a8 <TIM_ITRx_SetConfig>
      break;
 8002214:	e00b      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f000 fac1 	bl	80027a8 <TIM_ITRx_SetConfig>
        break;
 8002226:	e002      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800222c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIM_SlaveConfigSynchro+0x18>
 800225c:	2302      	movs	r3, #2
 800225e:	e031      	b.n	80022c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f89a 	bl	80023ac <TIM_SlaveTimer_SetConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    __HAL_UNLOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e018      	b.n	80022c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d00f      	beq.n	8002304 <TIM_Base_SetConfig+0x38>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <TIM_Base_SetConfig+0xc8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00b      	beq.n	8002304 <TIM_Base_SetConfig+0x38>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <TIM_Base_SetConfig+0xcc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d007      	beq.n	8002304 <TIM_Base_SetConfig+0x38>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <TIM_Base_SetConfig+0xd0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_Base_SetConfig+0x38>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <TIM_Base_SetConfig+0xd4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d108      	bne.n	8002316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d017      	beq.n	800234e <TIM_Base_SetConfig+0x82>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <TIM_Base_SetConfig+0xc8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <TIM_Base_SetConfig+0x82>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <TIM_Base_SetConfig+0xcc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00f      	beq.n	800234e <TIM_Base_SetConfig+0x82>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <TIM_Base_SetConfig+0xd0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00b      	beq.n	800234e <TIM_Base_SetConfig+0x82>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <TIM_Base_SetConfig+0xd4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <TIM_Base_SetConfig+0x82>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <TIM_Base_SetConfig+0xd8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_Base_SetConfig+0x82>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <TIM_Base_SetConfig+0xdc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d108      	bne.n	8002360 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40010800 	.word	0x40010800
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	40011000 	.word	0x40011000

080023ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f023 0307 	bic.w	r3, r3, #7
 80023d6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b70      	cmp	r3, #112	; 0x70
 80023f0:	d01a      	beq.n	8002428 <TIM_SlaveTimer_SetConfig+0x7c>
 80023f2:	2b70      	cmp	r3, #112	; 0x70
 80023f4:	d860      	bhi.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
 80023f6:	2b60      	cmp	r3, #96	; 0x60
 80023f8:	d054      	beq.n	80024a4 <TIM_SlaveTimer_SetConfig+0xf8>
 80023fa:	2b60      	cmp	r3, #96	; 0x60
 80023fc:	d85c      	bhi.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
 80023fe:	2b50      	cmp	r3, #80	; 0x50
 8002400:	d046      	beq.n	8002490 <TIM_SlaveTimer_SetConfig+0xe4>
 8002402:	2b50      	cmp	r3, #80	; 0x50
 8002404:	d858      	bhi.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d019      	beq.n	800243e <TIM_SlaveTimer_SetConfig+0x92>
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d854      	bhi.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
 800240e:	2b30      	cmp	r3, #48	; 0x30
 8002410:	d054      	beq.n	80024bc <TIM_SlaveTimer_SetConfig+0x110>
 8002412:	2b30      	cmp	r3, #48	; 0x30
 8002414:	d850      	bhi.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002416:	2b20      	cmp	r3, #32
 8002418:	d050      	beq.n	80024bc <TIM_SlaveTimer_SetConfig+0x110>
 800241a:	2b20      	cmp	r3, #32
 800241c:	d84c      	bhi.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d04c      	beq.n	80024bc <TIM_SlaveTimer_SetConfig+0x110>
 8002422:	2b10      	cmp	r3, #16
 8002424:	d04a      	beq.n	80024bc <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002426:	e047      	b.n	80024b8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f000 f9d0 	bl	80027dc <TIM_ETR_SetConfig>
      break;
 800243c:	e03f      	b.n	80024be <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d101      	bne.n	800244a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e03a      	b.n	80024c0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a1a      	ldr	r2, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002470:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	621a      	str	r2, [r3, #32]
      break;
 800248e:	e016      	b.n	80024be <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	461a      	mov	r2, r3
 800249e:	f000 f873 	bl	8002588 <TIM_TI1_ConfigInputStage>
      break;
 80024a2:	e00c      	b.n	80024be <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f000 f8d3 	bl	800265c <TIM_TI2_ConfigInputStage>
      break;
 80024b6:	e002      	b.n	80024be <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80024bc:	bf00      	nop
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 0201 	bic.w	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d00f      	beq.n	8002516 <TIM_TI1_SetConfig+0x4e>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <TIM_TI1_SetConfig+0xb0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00b      	beq.n	8002516 <TIM_TI1_SetConfig+0x4e>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <TIM_TI1_SetConfig+0xb4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <TIM_TI1_SetConfig+0x4e>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <TIM_TI1_SetConfig+0xb8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <TIM_TI1_SetConfig+0x4e>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <TIM_TI1_SetConfig+0xbc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <TIM_TI1_SetConfig+0x52>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <TIM_TI1_SetConfig+0x54>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e003      	b.n	800253a <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	b2db      	uxtb	r3, r3
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f023 030a 	bic.w	r3, r3, #10
 8002554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 030a 	and.w	r3, r3, #10
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800
 8002580:	40000c00 	.word	0x40000c00
 8002584:	40010800 	.word	0x40010800

08002588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 030a 	bic.w	r3, r3, #10
 80025c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f023 0210 	bic.w	r2, r3, #16
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	b29b      	uxth	r3, r3
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002636:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	621a      	str	r2, [r3, #32]
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 0210 	bic.w	r2, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b087      	sub	sp, #28
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800270a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	621a      	str	r2, [r3, #32]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800276e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	b29b      	uxth	r3, r3
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002782:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	031b      	lsls	r3, r3, #12
 8002788:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f043 0307 	orr.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	609a      	str	r2, [r3, #8]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	431a      	orrs	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2201      	movs	r2, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1a      	ldr	r2, [r3, #32]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	431a      	orrs	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	621a      	str	r2, [r3, #32]
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e046      	b.n	800290a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d00e      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10c      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800
 800291c:	40010800 	.word	0x40010800

08002920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e03f      	b.n	80029b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f834 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f829 	bl	80029bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029fc:	f023 030c 	bic.w	r3, r3, #12
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	430b      	orrs	r3, r1
 8002a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a55      	ldr	r2, [pc, #340]	; (8002b7c <UART_SetConfig+0x1c0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d103      	bne.n	8002a32 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a2a:	f7ff f867 	bl	8001afc <HAL_RCC_GetPCLK2Freq>
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	e002      	b.n	8002a38 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a32:	f7ff f84f 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8002a36:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a40:	d14c      	bne.n	8002adc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009a      	lsls	r2, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	4a49      	ldr	r2, [pc, #292]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	0119      	lsls	r1, r3, #4
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2064      	movs	r0, #100	; 0x64
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a9a:	4419      	add	r1, r3
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002ab4:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	3332      	adds	r3, #50	; 0x32
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	f003 0207 	and.w	r2, r3, #7
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ada:	e04a      	b.n	8002b72 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	0119      	lsls	r1, r3, #4
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009a      	lsls	r2, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002b14:	fba3 0302 	umull	r0, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	fb00 f303 	mul.w	r3, r0, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b32:	4419      	add	r1, r3
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002b4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	fb00 f303 	mul.w	r3, r0, r3
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	3332      	adds	r3, #50	; 0x32
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <UART_SetConfig+0x1c4>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	440a      	add	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	2600      	movs	r6, #0
 8002b88:	4d0c      	ldr	r5, [pc, #48]	; (8002bbc <__libc_init_array+0x38>)
 8002b8a:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8c:	1b64      	subs	r4, r4, r5
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	f000 f822 	bl	8002bdc <_init>
 8002b98:	2600      	movs	r6, #0
 8002b9a:	4d0a      	ldr	r5, [pc, #40]	; (8002bc4 <__libc_init_array+0x40>)
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	; (8002bc8 <__libc_init_array+0x44>)
 8002b9e:	1b64      	subs	r4, r4, r5
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	08002c20 	.word	0x08002c20
 8002bc0:	08002c20 	.word	0x08002c20
 8002bc4:	08002c20 	.word	0x08002c20
 8002bc8:	08002c24 	.word	0x08002c24

08002bcc <memset>:
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4402      	add	r2, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
